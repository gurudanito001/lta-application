// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Email {
  id              String            @id @default(uuid())
  email           String            @unique
  verified        Boolean           @default(false)
  code            Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model User {
  id              String            @id @default(uuid())
  firstName       String
  lastName        String
  userType        UserType   
  preferences     Preference?       
  username        String?           @unique
  country         String?
  gender          String?
  email           String            @unique
  password        String    
  online          Boolean           @default(false)
  profileImage    String?
  topics          String[]          @default([])
  feeling         Json              @default("{}")
  language        String?           
  bio             String?
  emailVerified   Boolean           @default(true)
  followers Follows[] @relation("UserFollowers")
  following Follows[] @relation("UserFollowing")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Follows {
  id              String            @id @default(uuid())
  followerId      String
  followingId     String
  // Define foreign keys
  follower       User     @relation("UserFollowers", fields: [followerId], references: [id])
  following      User     @relation("UserFollowing", fields: [followingId], references: [id])

  // Define unique constraint to prevent duplicate follows
  @@unique([followerId, followingId])
}

model Preference {
  id              String          @id @default(uuid())
  user            User            @relation(fields: [userId], references: [id],  onDelete: Cascade) 
  userId          String          @unique 
  topics          String[]        @default([])
  genders         String[]        @default([])
  languages       String[]        @default([])
  countries       String[]        @default([])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt  
}


model Recommendation {
  id              String            @id @default(uuid())
  title           String
  description     String?
  image           String?
  link            String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}




enum UserType {
  listener
  venter
}