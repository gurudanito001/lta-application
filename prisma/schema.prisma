// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Email {
  id              String            @id @default(uuid())
  email           String            @unique
  verified        Boolean           @default(false)
  code            Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model User {
  id              String            @id @default(uuid())
  firstName       String
  lastName        String
  userType        UserType   
  username        String?           @unique
  isActive        Boolean           @default(true)
  showProfileImg  Boolean           @default(true)
  country         String?
  gender          String?
  email           String            @unique
  password        String    
  online          Boolean           @default(false)
  profileImage    String?
  topics          String[]          @default([])
  feeling         Json              @default("{}")
  language        String[]           
  bio             String?
  emailVerified   Boolean           @default(true)
  allowNotification Boolean         @default(true)
  averageRating   Float             @default(0)
  followers       Follows[]         @relation("UserFollowers")
  following       Follows[]         @relation("UserFollowing")
  blockers        Blocking[]        @relation("Blocker")
  blocked         Blocking[]        @relation("Blocked")
  caller          Call[]            @relation("Caller")
  callee          Call[]            @relation("Callee")
  initiatedBy     Call[]            @relation("Initiator")
  receivedBy      Call[]            @relation("Recipient")
  reporter        Report[]            @relation("Reporter")
  offender        Report[]            @relation("Offender")
  rater           Rating[]            @relation("Rater")
  rated           Rating[]            @relation("Rated")
  notifications   Notification[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Follows {
  id              String            @id @default(uuid())
  followerId      String
  followingId     String
  // Define foreign keys
  follower        User              @relation("UserFollowers", fields: [followerId], references: [id])
  following       User              @relation("UserFollowing", fields: [followingId], references: [id])
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime?         @updatedAt 
  // Define unique constraint to prevent duplicate follows
  @@unique([followerId, followingId])
}


model Recommendation {
  id              String            @id @default(uuid())
  title           String
  description     String?
  image           String?
  link            String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Call {
  id              String           @id @default(uuid())
  appId           String?
  callId          String           @unique
  roomId          String           @unique
  caller          User             @relation("Caller", fields: [callerId], references: [id],  onDelete: Cascade) 
  callerId        String  
  callee          User             @relation("Callee", fields: [calleeId], references: [id],  onDelete: Cascade) 
  calleeId        String
  initiatedBy     User             @relation("Initiator", fields: [initiatedById], references: [id],  onDelete: Cascade) 
  initiatedById   String  
  receivedBy      User             @relation("Recipient", fields: [receivedById], references: [id],  onDelete: Cascade) 
  receivedById    String  
  createTime      Int?
  cancelTime      Int?
  acceptTime      Int?
  timeoutTime     Int?
  rejectTime      Int?
  endTime         Int?  
  loginTime       String?
  logoutTime      String?           
  duration        Int?             @default(0)
  status          String?
  timeout         Int?
  reason          String?
  metaData        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Report {
  id              String            @id @default(uuid())
  reporter        User             @relation("Reporter", fields: [reporterId], references: [id],  onDelete: Cascade) 
  reporterId      String  
  offender        User             @relation("Offender", fields: [offenderId], references: [id],  onDelete: Cascade) 
  offenderId      String
  reason          String               
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Blocking {
  id              String            @id @default(uuid())
  blocker         User              @relation("Blocker", fields: [blockerId], references: [id],  onDelete: Cascade) 
  blockerId       String 
  blocked         User              @relation("Blocked", fields: [blockedId], references: [id],  onDelete: Cascade) 
  blockedId       String 
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  // Define unique constraint to prevent duplicate blocking
  @@unique([blockerId, blockedId])
}

model Rating {
  id              String            @id @default(uuid())
  rater           User              @relation("Rater", fields: [raterId], references: [id],  onDelete: Cascade) 
  raterId         String 
  rated           User              @relation("Rated", fields: [ratedId], references: [id],  onDelete: Cascade) 
  ratedId         String 
  rating          Int
  comment         String?
  anonymous       Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Notification {
  id              String            @id @default(uuid())
  user            User?             @relation( fields: [userId], references: [id],  onDelete: Cascade) 
  userId          String?
  type            NotificationType
  content         String
  isRead          Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model AppVersion {
  id              String            @id @default(uuid())             
  version         String
  message         String
  force           Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}




enum UserType {
  listener
  venter
}

enum NotificationType {
  call
  follow
  rating
}